name: Release

on:
  push:
    tags:
      - '*.*.*'
  release:
    types: [published]

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'src/PartnerAdminLinkTool.UI/PartnerAdminLinkTool.UI.csproj'

jobs:
  create-release-artifacts:
    name: Create Release Artifacts
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: 
          - win-x64
          - win-x86
        include:
          - target: win-x64
            os: windows-latest
            artifact_name: PartnerAdminLinkTool-win-x64
            asset_name: PartnerAdminLinkTool-win-x64.exe
          - target: win-x86
            os: windows-latest
            artifact_name: PartnerAdminLinkTool-win-x86
            asset_name: PartnerAdminLinkTool-win-x86.exe
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Get version from tag
      id: get_version
      shell: bash
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          # Remove the 'v' prefix from the tag for .NET version compatibility
          VERSION="${GITHUB_REF#refs/tags/}"
          VERSION="${VERSION#v}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
        else
          echo "version=dev-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        fi
        
    - name: Restore dependencies
      run: dotnet restore PartnerAdminLinkTool.sln
      
    - name: Publish application
      shell: bash
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} \
          --configuration Release \
          --runtime ${{ matrix.target }} \
          --self-contained true \
          --output ./publish/${{ matrix.artifact_name }} \
          /p:Version=${{ steps.get_version.outputs.version }} \
          /p:AssemblyVersion=${{ steps.get_version.outputs.version }} \
          /p:FileVersion=${{ steps.get_version.outputs.version }} \
          /p:PublishSingleFile=true \
          /p:PublishReadyToRun=false \
          /p:PublishTrimmed=false \
          /p:IncludeNativeLibrariesForSelfExtract=true \
          /p:UseAppHost=true
          
    - name: Verify published files
      shell: bash
      run: |
        echo "Files in publish directory for ${{ matrix.target }}:"
        ls -la ./publish/${{ matrix.artifact_name }}/
        echo "Executable files:"
        find ./publish/${{ matrix.artifact_name }}/ -type f -executable -o -name "*.exe" | head -10
          
    - name: Create release package
      shell: bash
      run: |
        # Copy the executable directly with the target-specific name including version
        cp ./publish/${{ matrix.artifact_name }}/PartnerAdminLinkTool.UI.exe ./${{ matrix.asset_name }}
        
        # Verify the executable was created
        ls -la ./${{ matrix.asset_name }}
        file ./${{ matrix.asset_name }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-v${{ steps.get_version.outputs.version }}
        path: ${{ matrix.asset_name }}
        retention-days: 30

  create-github-release:
    name: Create GitHub Release
    needs: create-release-artifacts
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v5
      with:
        path: ./artifacts
        
    - name: Move artifacts to release directory
      shell: bash
      run: |
        mkdir -p ./release
        find ./artifacts -name "*.exe" | xargs -I {} cp {} ./release/
        ls -la ./release/
        
    - name: Get version from tag
      id: get_version
      run: |
        # Remove the 'v' prefix from the tag for .NET version compatibility
        VERSION="${GITHUB_REF#refs/tags/}"
        VERSION="${VERSION#v}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
      
    - name: Generate release notes
      id: release_notes
      shell: bash
      run: |
        cat << 'EOF' > release_notes.md
        ## ðŸš€ Partner Admin Link (PAL) Tool ${{ steps.get_version.outputs.version }}
        
        ### ðŸ“¦ Downloads (Windows Executables)
        
        **Windows:**
        - `PartnerAdminLinkTool-win-x64.exe` - Windows 64-bit (x64) - Ready to run executable
        - `PartnerAdminLinkTool-win-x86.exe` - Windows 32-bit (x86) - Ready to run executable
        
        ### ðŸŽ¯ What's Included
        
        Each download is a standalone executable file:
        - Self-contained Partner Admin Link Tool executable
        - No additional files or extraction required
        - Ready to run immediately after download
        
        ### ðŸ”§ Installation
        
        1. Download the appropriate Windows executable for your platform
        2. No extraction needed - it's a ready-to-run .exe file
        3. Optionally, download the documentation files separately from the repository
        4. Run the executable directly to start linking your Partner ID
        
        ### ðŸ“š Documentation
        
        For setup instructions and documentation:
        - [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)
        
        ### âš¡ Requirements
        
        - Windows operating system (x64 or x86)
        - No .NET runtime installation required (self-contained)
        - Internet connectivity
        - Azure subscription and appropriate permissions
        - Microsoft AI Cloud Partner Program Partner ID
        
        ---
        
        **Full Changelog**: [View changes](https://github.com/${{ github.repository }}/compare/v${{ steps.get_version.outputs.version }}...HEAD)
        EOF
        
        echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: Partner Admin Link Tool ${{ steps.get_version.outputs.version }}
        body_path: ${{ steps.release_notes.outputs.release_notes_file }}
        files: ./release/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}